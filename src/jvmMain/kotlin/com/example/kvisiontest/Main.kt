package com.example.kvisiontest

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.http.content.*
import io.ktor.server.plugins.compression.*
import io.ktor.server.plugins.cors.routing.*
import io.ktor.server.routing.*
import io.kvision.remote.applyRoutes
import io.kvision.remote.getAllServiceManagers
import io.kvision.remote.kvisionInit

fun Application.main() {
    // üõ°Ô∏è Plugin CORS: permite solicitudes desde otros or√≠genes (por ejemplo, frontend en otro puerto)
    install(CORS) {
        anyHost() // ‚ö†Ô∏è En producci√≥n reemplaza con host("https://tu-dominio.com")
        allowHeader(HttpHeaders.ContentType)
        allowMethod(HttpMethod.Get)
        allowMethod(HttpMethod.Post)
    }

    // üì¶ Plugin de compresi√≥n para respuestas HTTP (reduce tama√±o de datos transferidos)
    install(Compression)

    routing {
        // üåê Sirve los archivos est√°ticos del frontend generado por KVision
        staticResources("/", "build/dist/js/productionExecutable") {
            default("index.html")
        }

        // üîÅ Aplica autom√°ticamente las rutas generadas por los servicios remotos (@KVService)
        getAllServiceManagers().forEach {
            applyRoutes(it)
        }
    }

    // üöÄ Inicializa internamente KVision en el backend (serializaci√≥n, configuraci√≥n, etc.)
    kvisionInit()
}
